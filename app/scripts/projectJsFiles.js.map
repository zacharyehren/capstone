{"version":3,"sources":["app.js","GoogleOauth.js","SortData.js","ZenFactory.js","ClosedTicketCtrl.js","HomeCtrl.js","IncidentsModalCtrl.js","IncidentsModalInstanceCtrl.js","IndexCtrl.js","MyTicketCtrl.js","NewTicketCtrl.js","TicketCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"projectJsFiles.js","sourcesContent":["(function() {\n  function config($locationProvider, $stateProvider) {\n\n    $locationProvider\n      .html5Mode({\n        enabled: true,\n        requireBase: false\n      });\n\n    $stateProvider\n      .state('home', {\n        url: '/',\n        controller: 'HomeCtrl as home',\n        templateUrl: '/templates/home.html'\n      })\n      .state('ticket', {\n        url: '/ticket',\n        controller: 'TicketCtrl as ticket',\n        templateUrl: '/templates/ticket.html'\n      })\n      .state('closedTickets', {\n        url: '/closed-tickets',\n        controller: 'ClosedTicketCtrl as closedTickets',\n        templateUrl: '/templates/closedTickets.html'\n      })\n      .state('newTicket', {\n        url: '/new-ticket',\n        controller: 'NewTicketCtrl as newTicket',\n        templateUrl: '/templates/newTicket.html'\n      })\n      .state('myTickets', {\n        url: '/my-tickets',\n        controller: 'MyTicketCtrl as myTickets',\n        templateUrl: '/templates/myTicket.html'\n      });\n  }\n\n  angular\n    .module('capstone', ['ui.router', 'ui.bootstrap', 'ngCookies', 'ngRoute'])\n    .config(config);\n})();\n","(function() {\n  function GoogleOauth(ZenFactory, $cookies) {\n\n    var GoogleOauth = {};\n    var userObject;\n    var profile;\n\n    function onSignIn(googleUser) {\n      profile = googleUser.getBasicProfile();\n      domain = googleUser.getHostedDomain();\n      if (domain == \"sharethrough.com\")  {\n        if ($cookies.get('zendeskUserEmail') == undefined) {\n        userObject = {\n          name: profile.getName(),\n          email: profile.getEmail()\n        };\n\n        GoogleOauth.userObject = userObject;\n        $cookies.put('zendeskUserEmail', userObject.email);\n        $cookies.put('zendeskUserName', userObject.name);\n        location.reload();\n      }\n      } else {\n        alert(\"Only Sharethrough emails have access.\");\n        GoogleOauth.signOut();\n      };\n    };\n\n\n    GoogleOauth.signOut = function() {\n      var auth2 = gapi.auth2.getAuthInstance();\n      auth2.signOut().then(function() {\n        console.log('User signed out.');\n      });\n    }\n\n\n    window.onSignIn = onSignIn;\n\n    return GoogleOauth;\n    };\n\n    angular\n      .module('capstone')\n      .factory('GoogleOauth', ['ZenFactory', '$cookies', GoogleOauth]);\n  })();\n","(function() {\n  function SortData(ZenFactory, $cookies) {\n    var sort = \"\";\n    var selected = \"\";\n\n    SortData.ticketSort = function(sortType, ZenFactoryObject) {\n      if (sort == \"\" || sort == \"desc\" || selected != sortType) {\n        sort = \"asc\";\n        selected = sortType;\n        // Ex: ZenFactory[myTicketData][subject].sort...\n        ZenFactory[ZenFactoryObject]['ticket'].sort(function(a, b) {\n          return a[sortType].localeCompare(b[sortType]);\n        });\n      } else if (sort == \"asc\"){\n        sort = \"desc\";\n        ZenFactory[ZenFactoryObject]['ticket'].sort(function(a, b) {\n          return b[sortType].localeCompare(a[sortType]);\n        });\n      }\n    }\n\n    return SortData;\n\n  };\n\n\n  angular\n    .module('capstone')\n    .factory('SortData', ['ZenFactory', '$cookies', SortData]);\n})();\n","(function() {\n  function ZenFactory($http, $cookies) {\n\n    var ZenFactory = {};\n\n    var findIncidents = function(ZenFactoryObject){\n      var tickets = ZenFactoryObject['ticket'];\n      var incidents = ZenFactoryObject['incidents'];\n      for (var i = 0; i < tickets.length; i++) {\n        for (var p = 0; p < incidents.length; p++)\n        if(tickets[i].id == incidents[p].problem_id) {\n          tickets[i].hasIncident = true;\n        }\n      }\n    }\n\n    ZenFactory.listTickets = function() {\n      var displayTickets = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/tickets'\n      };\n\n      return $http(displayTickets).then(function successCallback(response) {\n        ZenFactory.unsolvedTickets = response.data;\n        findIncidents(ZenFactory.unsolvedTickets);\n      });\n    };\n\n    ZenFactory.listClosedTickets = function() {\n      var displayClosedTickets = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/closed_tickets'\n      };\n\n      return $http(displayClosedTickets).then(function successCallback(response) {\n        ZenFactory.closedTickets = response.data;\n        findIncidents(ZenFactory.closedTickets);\n      });\n    };\n\n    ZenFactory.listMyTickets = function() {\n      var displayMyTickets = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/my_tickets',\n        params: {\n          user_email: $cookies.get('zendeskUserEmail')\n        }\n      };\n      return $http(displayMyTickets).then(function successCallback(response) {\n        ZenFactory.myTicketData = response.data;\n      });\n    };\n\n      ZenFactory.createTicket = function(subject, comment) {\n        var createTicket = {\n          method: 'POST',\n          url: 'http://localhost:3000/api/tickets',\n          data: {\n            subject: subject,\n            comment_body: comment,\n            submitter_email: $cookies.get('zendeskUserEmail'),\n            submitter_name: $cookies.get('zendeskUserName')\n          }\n        };\n\n\n        $http(createTicket).then(function successCallback(response) {\n          ZenFactory.newTicket = response.data;\n        });\n      };\n\n    ZenFactory.returnTicket = function() {\n      var ticketInfo = {\n        method: 'GET',\n        url: 'http://localhost:3000/api/tickets/' + $cookies.get('zendeskTicketId'),\n      }\n      return $http(ticketInfo).then(function successCallback(response) {\n        ZenFactory.ticket = response.data;\n      });\n    }\n\n    ZenFactory.createComment = function(commentBody) {\n      var createComment = {\n        method: 'POST',\n        url: 'http://localhost:3000/api/tickets/new_comment',\n        data: {\n          user_email: $cookies.get('zendeskUserEmail'),\n          comment_body: commentBody,\n          id: $cookies.get('zendeskTicketId')\n        }\n      };\n\n      $http(createComment).then(function successCallback(response) {\n        ZenFactory.newComment = response.data;\n      });\n    }\n\n    return ZenFactory;\n\n  };\n\n\n  angular\n    .module('capstone')\n    .factory('ZenFactory', ['$http', '$cookies', ZenFactory]);\n})();\n","(function() {\n  function ClosedTicketCtrl(GoogleOauth, ZenFactory, SortData, $cookies, $location, $anchorScroll, $scope, $stateParams) {\n    this.sortClass = \"\";\n    this.selected = \"\";\n\n    this.sortData = function(sortType) {\n      if (this.selected != sortType) {\n        this.sortClass = \"\";\n      }\n      this.selected = sortType;\n      if (this.sortClass == \"\" || this.sortClass == \"down-carat\") {\n        this.sortClass = \"up-carat\";\n        SortData.ticketSort(sortType, \"closedTickets\");\n      } else if (this.sortClass == \"up-carat\") {\n        this.sortClass = \"down-carat\";\n        SortData.ticketSort(sortType, \"closedTickets\");\n      }\n    }\n\n    this.loading = true;\n\n    var closedTicketsHandler = function(){\n      this.loading = false;\n    }\n\n    closedTicketsHandler = closedTicketsHandler.bind(this);\n\n    ZenFactory.listClosedTickets().then(closedTicketsHandler);\n\n    this.ZenFactory = ZenFactory;\n\n    this.passTicketInfo = function(ticketId, ticketSubject) {\n      $cookies.put('zendeskTicketId', ticketId);\n      $cookies.put('zendeskTicketSubject', ticketSubject)\n    }\n\n    // Moves view to the top of the page when selecting different tickets\n    $scope.$watchCollection('$stateParams', function() {\n      $anchorScroll();\n    });\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('ClosedTicketCtrl', ['GoogleOauth', 'ZenFactory', 'SortData', '$cookies', '$location', '$anchorScroll', '$scope', '$stateParams', ClosedTicketCtrl]);\n})();\n","(function() {\n  function HomeCtrl(GoogleOauth, ZenFactory, SortData, $cookies, $location, $anchorScroll, $scope, $stateParams) {\n    this.sortClass = \"\";\n    this.selected = \"\";\n\n    this.sortData = function(sortType) {\n      if (this.selected != sortType) {\n        this.sortClass = \"\";\n      }\n      this.selected = sortType;\n      if (this.sortClass == \"\" || this.sortClass == \"down-carat\") {\n        this.sortClass = \"up-carat\";\n        SortData.ticketSort(sortType, \"unsolvedTickets\");\n      } else if (this.sortClass == \"up-carat\") {\n        this.sortClass = \"down-carat\";\n        SortData.ticketSort(sortType, \"unsolvedTickets\");\n      }\n    }\n\n    this.userSignedOut  = function() {\n      if ($cookies.get('zendeskUserEmail') != undefined) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    this.loading = true;\n\n    var listTicketsHandler = function(){\n      this.loading = false;\n    }\n\n    listTicketsHandler = listTicketsHandler.bind(this);\n\n    var signedInTicketReturn = function() {\n      if ($cookies.get('zendeskUserEmail') != undefined) {\n        ZenFactory.listTickets().then(listTicketsHandler);\n      } else {\n        listTicketsHandler();\n      }\n    };\n\n    signedInTicketReturn();\n\n    this.ZenFactory = ZenFactory;\n\n    this.passTicketInfo = function(ticketId, ticketSubject) {\n      $cookies.put('zendeskTicketId', ticketId);\n      $cookies.put('zendeskTicketSubject', ticketSubject)\n    }\n\n    // Moves view to the top of the page when selecting different tickets\n    $scope.$watchCollection('$stateParams', function() {\n      $anchorScroll();\n    });\n\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('HomeCtrl', ['GoogleOauth', 'ZenFactory', 'SortData', '$cookies', '$location', '$anchorScroll', '$scope', '$stateParams', HomeCtrl]);\n})();\n","(function(){\n  function IncidentsModalCtrl($uibModal) {\n\n    this.openModal = function(ticketId, ZenFactoryObject) {\n      var modalInstance = $uibModal.open({\n        animation: this.animationsEnabled,\n        templateUrl: '/templates/incidentsModal.html',\n        controller: 'IncidentsModalInstanceCtrl',\n        controllerAs: 'incidentsModal',\n        resolve: {\n          selectedTicketId: ticketId,\n          ZenFactoryObject: ZenFactoryObject\n        }\n      });\n    };\n\n  }\n  angular\n    .module('capstone')\n    .controller('IncidentsModalCtrl', ['$uibModal', IncidentsModalCtrl]);\n})();\n","(function() {\n  function IncidentsModalInstanceCtrl($uibModalInstance, ZenFactory, SortData, $cookies, selectedTicketId, ZenFactoryObject) {\n\n    this.sortClass = \"\";\n    this.selected = \"\";\n\n    this.selectedTicket = selectedTicketId;\n    this.ZenFactoryObject = ZenFactoryObject;\n\n    this.sortData = function(sortType) {\n      if (this.selected != sortType) {\n        this.sortClass = \"\";\n      }\n      this.selected = sortType;\n      if (this.sortClass == \"\" || this.sortClass == \"down-carat\") {\n        this.sortClass = \"up-carat\";\n        this.incidentsArray.sort(function(a, b) {\n          return a[sortType].localeCompare(b[sortType]);\n        });\n      } else if (this.sortClass == \"up-carat\") {\n        this.sortClass = \"down-carat\";\n        this.incidentsArray.sort(function(a, b) {\n          return b[sortType].localeCompare(a[sortType]);\n        });\n      }\n    }\n\n    var returnIncidents = function() {\n      this.incidentsArray = [];\n      var incidents = this.ZenFactoryObject[\"incidents\"];\n      for (var i = 0; i < incidents.length; i++){\n        if (this.selectedTicket == incidents[i].problem_id) {\n          this.incidentsArray.push(incidents[i]);\n        }\n      }\n    }\n\n    returnIncidents = returnIncidents.bind(this);\n\n    returnIncidents();\n\n    this.ZenFactory = ZenFactory;\n\n    this.ticketSubject = $cookies.get('zendeskTicketSubject');\n\n    this.passTicketInfo = function(ticketId, ticketSubject) {\n      $cookies.put('zendeskTicketId', ticketId);\n      $cookies.put('zendeskTicketSubject', ticketSubject);\n      $uibModalInstance.close();\n    }\n\n    this.closeModal = function() {\n      $uibModalInstance.dismiss();\n    };\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('IncidentsModalInstanceCtrl', ['$uibModalInstance', 'ZenFactory', 'SortData', '$cookies', 'selectedTicketId', 'ZenFactoryObject', IncidentsModalInstanceCtrl]);\n})();\n","(function() {\n  function IndexCtrl(GoogleOauth, ZenFactory, $cookies) {\n\n    this.userSignedIn  = function() {\n      if ($cookies.get('zendeskUserEmail') != undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    this.ZenFactory = ZenFactory;\n\n    this.user = $cookies.get('zendeskUserName');\n\n    this.signOut = function() {\n      GoogleOauth.signOut();\n      var cookies = $cookies.getAll();\n        angular.forEach(cookies, function (value, key) {\n          $cookies.remove(key);\n        });\n        window.location = '/';\n    };\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('IndexCtrl', ['GoogleOauth', 'ZenFactory', '$cookies', IndexCtrl]);\n})();\n","(function() {\n  function MyTicketCtrl(GoogleOauth, ZenFactory, SortData, $cookies, $location, $anchorScroll, $scope, $stateParams) {\n    this.sortClass = \"\";\n    this.selected = \"\";\n\n    this.sortData = function(sortType) {\n      if (this.selected != sortType) {\n        this.sortClass = \"\";\n      }\n      this.selected = sortType;\n      if (this.sortClass == \"\" || this.sortClass == \"down-carat\") {\n        this.sortClass = \"up-carat\";\n        SortData.ticketSort(sortType, \"myTicketData\");\n      } else if (this.sortClass == \"up-carat\") {\n        this.sortClass = \"down-carat\";\n        SortData.ticketSort(sortType, \"myTicketData\");\n      }\n    }\n\n    this.loading = true;\n\n    var myTicketsHandler = function() {\n      this.loading = false;\n    }\n\n    myTicketsHandler = myTicketsHandler.bind(this);\n\n    ZenFactory.listMyTickets().then(myTicketsHandler);\n\n    this.ZenFactory = ZenFactory;\n\n    this.passTicketInfo = function(ticketId, ticketSubject) {\n      $cookies.put('zendeskTicketId', ticketId);\n      $cookies.put('zendeskTicketSubject', ticketSubject)\n    }\n\n    // Moves view to the top of the page when selecting different tickets\n    $scope.$watchCollection('$stateParams', function() {\n      $anchorScroll();\n    });\n\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('MyTicketCtrl', ['GoogleOauth', 'ZenFactory', 'SortData', '$cookies', '$location', '$anchorScroll', '$scope', '$stateParams', MyTicketCtrl]);\n})();\n","(function() {\n  function NewTicketCtrl(GoogleOauth, ZenFactory, $cookies, $location) {\n\n    this.ZenFactory = ZenFactory;\n\n    this.submitter = $cookies.get('zendeskUserEmail');\n\n    this.createTicket = function() {\n      ZenFactory.createTicket(this.subject, this.comment);\n       $location.path('/');\n    };\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('NewTicketCtrl', ['GoogleOauth', 'ZenFactory', '$cookies', '$location', NewTicketCtrl]);\n})();\n","(function() {\n  function TicketCtrl(ZenFactory, $cookies, $location, $anchorScroll, $scope, $stateParams) {\n\n    this.loading = true;\n\n    var listTicketHandler = function(){\n      this.loading = false;\n    }\n\n    listTicketHandler = listTicketHandler.bind(this);\n    ZenFactory.returnTicket().then(listTicketHandler);\n\n    this.ZenFactory = ZenFactory;\n\n    this.ticketSubject = $cookies.get('zendeskTicketSubject')\n\n    this.createComment = function() {\n      this.submitted = true;\n      ZenFactory.createComment(this.commentBody);\n      location.reload();\n    };\n\n    // Moves view to the top of the page when selecting different tickets\n    $scope.$watchCollection('$stateParams', function() {\n      $anchorScroll();\n   });\n\n  }\n\n  angular\n    .module('capstone')\n    .controller('TicketCtrl', ['ZenFactory', '$cookies', '$location', '$anchorScroll', '$scope', '$stateParams', TicketCtrl]);\n})();\n"]}